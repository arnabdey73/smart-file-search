[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smart-file-search"
version = "1.0.0"
description = "Intelligent document search system with AI-powered enhancements"
authors = [
    {name = "Smart File Search Team", email = "team@smartfilesearch.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["search", "documents", "ai", "fts", "indexing"]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "httpx>=0.25.0",
    "click>=8.1.0",
    "sqlite-fts4>=1.0.3",
    "PyPDF2>=3.0.1",
    "python-docx>=0.8.11",
    "python-pptx>=0.6.23",
    "openpyxl>=3.1.2",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "openai>=1.3.0",
    "PyYAML>=6.0.1",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
semantic = [
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.3",
]

dev = [
    "black>=23.9.1",
    "ruff>=0.1.3",
    "mypy>=1.6.0",
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
]

[project.scripts]
smart-file-search = "search_agent.cli:main"

[project.urls]
Homepage = "https://github.com/smartfilesearch/smart-file-search"
Repository = "https://github.com/smartfilesearch/smart-file-search"
Documentation = "https://github.com/smartfilesearch/smart-file-search/docs"
"Bug Tracker" = "https://github.com/smartfilesearch/smart-file-search/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp_server*", "search_agent*", "llm*", "ui.backend*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # function is too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "PyPDF2.*",
    "docx.*",
    "pptx.*",
    "openpyxl.*",
    "bs4.*",
    "sentence_transformers.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=mcp_server",
    "--cov=search_agent", 
    "--cov=llm",
    "--cov=ui.backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["mcp_server", "search_agent", "llm", "ui/backend"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
